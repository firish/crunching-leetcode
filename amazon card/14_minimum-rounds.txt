2244. Minimum Rounds to Complete All Tasks
Medium

1532

44

Add to List

Share
You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, 
you can complete either 2 or 3 tasks of the same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

 

Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.
Example 2:

Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. 
Hence, you cannot complete all the tasks, and the answer is -1.
 

Constraints:

1 <= tasks.length <= 105
1 <= tasks[i] <= 109


// My solution

class Solution:
    def minimumRounds(self, tasks: List[int]) -> int:
        h = defaultdict(int)
        for t in tasks: h[t] += 1
        
        res = 0
        for k,v in h.items():
            if v < 2: return -1 # base condition
            
            # Greedy method
            # first check for divisiblity by 3
            if v % 3 == 0:
                res += v/3
                continue
            
            # step 2
            # use two once, and then check for divisiblity by 3 on every step
            flag = 0
            temp = v
            while temp > 0:
                temp -= 2
                res += 1
                if temp % 3 == 0:
                    res += temp/3
                    flag = 1
                    break
            if flag == 1: continue
            
            # step 3
            # check for divisiblity by 2
            if v % 2 == 0:
                res += v/2
                continue
            
            # if any term can not be divided by 2 or 3, return -1
            return -1
        
        return int(res)