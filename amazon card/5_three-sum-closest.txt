16. 3Sum Closest
Medium

Given an integer array nums of length n and an integer target, 
find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.
 
Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

Example 2:
Input: nums = [0,0,0], target = 1
Output: 0
 
Constraints:
3 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-104 <= target <= 104


// My first solution
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        closest = float('inf')
        s = float('inf')
        nums.sort()
        for i in range(len(nums)-2):
            low = i + 1
            high = len(nums)-1
            while low < high:
                score = nums[i] + nums[low] + nums[high]
                diff = abs(target-score)
                if diff < closest:
                    closest = diff
                    s = score
                if score >= target: high -= 1
                else: low += 1
        return s

Runtime: 927 ms, faster than 6.05% of Python3 online submissions for 3Sum Closest.
Memory Usage: 14 MB, less than 69.51% of Python3 online submissions for 3Sum Closest.

