169. Majority Element
Easy

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. 
You may assume that the majority element always exists in the array.

 

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2
 
Constraints:
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 
Follow-up: Could you solve the problem in linear time and in O(1) space?

// My code
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        freq = defaultdict(int)
        majority = (len(nums)//2)+1
        for el in nums:
            freq[el] += 1
            if freq[el] >= majority: return el

Runtime: 242 ms, faster than 55.85% of Python3 online submissions for Majority Element.
Memory Usage: 15.5 MB, less than 85.99% of Python3 online submissions for Majority Element.


// using boyer-moore algo
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        count = 1
        key = nums[0]
        for i in range(1, len(nums)):
            if count == 0: key = nums[i]
            if nums[i] == key: count += 1
            else: count -= 1
        return key

Runtime: 176 ms, faster than 90.39% of Python3 online submissions for Majority Element.
Memory Usage: 15.5 MB, less than 34.60% of Python3 online submissions for Majority Element.