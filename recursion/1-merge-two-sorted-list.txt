21. Merge Two Sorted Lists
Easy

You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. 
The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: list1 = [], list2 = []
Output: []

Example 3:
Input: list1 = [], list2 = [0]
Output: [0]
 
Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order

// My first solution (Recursion)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def merge(self, h1, h2, h3):
        if not h1 and h2: 
            h3.next = h2
            return 
        elif not h2 and h1: 
            h3.next = h1
            return 
        else:
            if h1.val >= h2.val:
                h3.next = h2
                h2 = h2.next
            else:
                h3.next = h1
                h1 = h1.next
            h3 = h3.next
        self.merge(h1, h2, h3)
            
            
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if not list1 and not list2: return None
        elif not list1 and list2: return list2
        elif not list2 and list1: return list1
        h3 = ListNode(0,None)
        root = h3
        self.merge(list1, list2, h3)
        return root.next

Submission Detail
208 / 208 test cases passed.
Status: Accepted
Runtime: 53 ms
Memory Usage: 14.1 MB


// Inspired, cleaner code
