50. Pow(x, n)
Medium

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:
-100.0 < x < 100.0
-231 <= n <= 231-1
-104 <= xn <= 104


// My solution
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0: return 1
        elif x == 1: return x
        elif x == -1: return x if n > 0 else -x
        else:
            ans = x; sign = n; n = abs(n)
            while n != 1: 
                ans *= x; n-= 1
                if (ans < 0.00001 or ans > 100000) and sign < 0: return 0
                elif sign > 0:
                    if ans > 100000: return 0
                    elif x > 0 and ans < 0.00001: return 0
            return ans if sign > 0 else 1/ans


// Inspired
for even, x*x, n//2
for odd, x*(x*x), n-1//2
class Solution:
    def myPow(self, x: float, n: int) -> float:

        def function(base=x, exponent=abs(n)):
            if exponent == 0:
                return 1
            elif exponent % 2 == 0:
                return function(base * base, exponent // 2)
            else:
                return base * function(base * base, (exponent - 1) // 2)

        f = function()
        
        return float(f) if n >= 0 else 1/f