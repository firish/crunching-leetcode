1762. Buildings With an Ocean View
Medium

There are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.
The ocean is to the right of the buildings. 
A building has an ocean view if the building can see the ocean without obstructions. 
Formally, a building has an ocean view if all the buildings to its right have a smaller height.

Return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.

Example 1:
Input: heights = [4,2,3,1]
Output: [0,2,3]
Explanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.

Example 2:
Input: heights = [4,3,2,1]
Output: [0,1,2,3]
Explanation: All the buildings have an ocean view.

Example 3:
Input: heights = [1,3,2,4]
Output: [3]
Explanation: Only building 3 has an ocean view.

Constraints:
1 <= heights.length <= 105
1 <= heights[i] <= 109


// My code
class Solution:
    def findBuildings(self, heights: List[int]) -> List[int]:
        arr = []
        tallest = 0
        for i in range(len(heights)-1,-1,-1):
            if heights[i] > tallest:
                tallest = heights[i]
                arr.append(i)
        return arr[::-1]

result -> 
77 / 77 test cases passed.
Status: Accepted
Runtime: 789 ms (70%)
Memory Usage: 31.5 MB (45%)



class Solution:
    def findBuildings(self, heights: List[int]) -> List[int]:
        arr, tallest = [], 0
        for i in range(len(heights)-1,-1,-1):
            if heights[i] > tallest: tallest = heights[i]; arr.append(i)
        return arr[::-1]

Runtime: 759 ms, faster than 77.29% of Python3 online submissions for Buildings With an Ocean View.
Memory Usage: 31.5 MB, less than 73.42% of Python3 online submissions for Buildings With an Ocean View.


// using a queue,
// you dont have to reverse, 
// so it becomes a single pass solution
class Solution:
    def findBuildings(self, heights: List[int]) -> List[int]:
        res = collections.deque([len(heights) - 1])
        for i in range(len(heights) - 2, -1, -1):
            if heights[i] > heights[res[0]]:
                res.appendleft(i)
        return res


// Important follow up
// do it while iterarting from left to right
// we have to use a stack, inspired
def findBuildings(self, heights: List[int]) -> List[int]:
        s = []
        for i, h in enumerate(heights):
            while s and heights[s[-1]] <= h:
                s.pop()
            s.append(i)
        return s