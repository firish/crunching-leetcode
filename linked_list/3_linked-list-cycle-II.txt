Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). 
It is -1 if there is no cycle. Note that pos is not passed as a parameter.
Do not modify the linked list.

 

Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Example 2:
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.

Example 3:
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
 

Constraints:
The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
 
Follow up: Can you solve it using O(1) (i.e. constant) memory?

// My first solution
// using a hash map
class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        p = head
        hashmap = {}
        index = 0
        while p:
            if p not in hashmap.keys():
                hashmap[p] = index
                index += 1
                p = p.next
            else:
                return p
        return None
                
result ->
Submission Detail
16 / 16 test cases passed.
Status: Accepted
Runtime: 56 ms (78%)
Memory Usage: 17.9 MB (<10%)


// my second solution
class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        if not head:
            return None
        
        fast, slow = head, head
        while fast:
            slow = slow.next
            fast = fast.next
            if fast:
                fast = fast.next
            else:
                return None
            if fast == slow:
                break
        if fast == slow:
            p = head
            # move p and fast one step at a time
            # they intersect at the start of cycle
            while fast != p:
                fast = fast.next
                p = p.next
            return p
        else: return None

Submission Detail
16 / 16 test cases passed.
Status: Accepted
Runtime: 56 ms (78%)
Memory Usage: 17.3 MB (40%)
