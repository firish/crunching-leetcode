You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: list1 = [], list2 = []
Output: []

Example 3:
Input: list1 = [], list2 = [0]
Output: [0]
 
Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

// My solution
// Inplace 
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        l1, l2 = list1, list2
        l1b = l1
        if l1 == None and l2 == None: return None
        if l1 == None and l2: return l2
        if l2 == None and l1: return l1
        index = 0
        link = l1
        while l1 and l2:
            if l2.val > l1.val:
                break
            index += 1
            l2c = l2
            l2 = l2.next
            l2c.next = l1
            if index == 1:
                list1 = l2c
                link = l2c
            else:
                link.next = l2c
                link = link.next
        while l1 and l2:
            if l1.val < l2.val:
                l1b = l1
                l1 = l1.next
            else:
                if l1 == l1b:
                    l1 = l1.next
                if l1b.next != l1:
                    l1b = l1b.next
                l1b.next = l2
                l2c = l2
                l2 = l2.next
                l2c.next = l1
        if l2: l1b.next = l2
        return list1

result ->
Submission Detail
208 / 208 test cases passed.
Status: Accepted
Runtime: 58 ms (40%)
Memory Usage: 13.9 MB (41%)

// use auxilary space
// beautiful solution, inspired
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        head = l3 = ListNode(0)
        while list1 and list2:
            if list1.val <= list2.val:
                l3.next = list1
                list1 = list1.next
            else:
                l3.next = list2
                list2 = list2.next
            l3 = l3.next
        l3.next = list1 or list2
        return head.next

result ->
Submission Detail
208 / 208 test cases passed.
Status: Accepted
Runtime: 32 ms (98%)
Memory Usage: 13.9 MB (85%)
    cur.next = l1 or l2
    return dummy.next