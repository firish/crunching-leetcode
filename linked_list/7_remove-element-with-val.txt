Given the head of a linked list and an integer val, 
remove all the nodes of the linked list that has Node.val == val, 
and return the new head.

 
Example 1:
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Example 2:
Input: head = [], val = 1
Output: []

Example 3:
Input: head = [7,7,7,7], val = 7
Output: [] 

Constraints:
The number of nodes in the list is in the range [0, 104].
1 <= Node.val <= 50
0 <= val <= 50

// My first solution
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        
        # Handle corner cases
        if head == None: return None
        if head.next == None:
            return None if head.val == val else head
        
        # To remove the nodes at front of Linked List
        while head and head.val == val:
            head = head.next
        if head == None: return None # if all Linked List nodes are removed
        
        # use two pointers to remove nodes from linked list
        prev, pos = head, head.next
        while pos:
            if pos.val == val:
                prev.next = pos.next
                pos = pos.next
            else:
                prev = prev.next
                pos = pos.next
        return head

result ->
Submission Detail
66 / 66 test cases passed.
Status: Accepted
Runtime: 66 ms (95%)
Memory Usage: 17.8 MB (68%)