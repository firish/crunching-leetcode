You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

Constraints:
The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

// My first solution
// problem gets tricky, cause there is no inbuilt method for adding nodes to linked list
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        s = []
        p1, p2 = l1, l2
        c = 0
        while p1 or p2:
            if p1:
                e1 = p1.val
                p1 = p1.next
            else:
                e1 = 0
            if p2:
                e2 = p2.val
                p2 = p2.next
            else:
                e2 = 0
            e = e1 + e2 + c 
            if e < 10:
                c = 0
            else:
                c = 1
                e = e - 10
            s.append(e)
        if c == 1: s.append(c)
        i = 0
        for val in s:
            l = ListNode(val, None)
            if i == 0:
                head = l
                current = l
            else:
                current.next = l
                current = current.next
            i += 1
        return head

result ->
Submission Detail
1568 / 1568 test cases passed.
Status: Accepted
Runtime: 72 ms (87%)
Memory Usage: 14 MB (25%)
            