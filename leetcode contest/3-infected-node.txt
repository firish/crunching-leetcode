2385. Amount of Time for Binary Tree to Be Infected

User Accepted:4322
User Tried:5498
Total Accepted:4457
Total Submissions:8725
Difficulty:Medium
You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

 

Example 1:


Input: root = [1,5,3,null,4,10,6,9,2], start = 3
Output: 4
Explanation: The following nodes are infected during:
- Minute 0: Node 3
- Minute 1: Nodes 1, 10 and 6
- Minute 2: Node 5
- Minute 3: Node 4
- Minute 4: Nodes 9 and 2
It takes 4 minutes for the whole tree to be infected so we return 4.
Example 2:


Input: root = [1], start = 1
Output: 0
Explanation: At minute 0, the only node in the tree is infected so we return 0.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 105
Each node has a unique value.
A node with a value of start exists in the tree.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque

class Solution:
    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:
        graph = defaultdict(list)
        
        # convert BT to Graph
        stack = [(root, None)] # Stack has node and parent node
        while stack:
            node, parent = stack.pop()
            if parent:
                graph[parent.val].append(node.val)
                graph[node.val].append(parent.val)
            if node.left: stack.append((node.left, node))
            if node.right: stack.append((node.right, node))
        print(graph)
        
        res = 0
        visited = {start}
        queue = deque([start])
        while queue: 
            print(queue)
            for i in range(len(queue)): 
                node = queue.popleft()
                for value in graph[node]: 
                    if value not in visited: 
                        visited.add(value)
                        queue.append(value)
            res += 1
        return res - 1 # -1 as you cant go anywhere from leaf nodes


Your input
[1,5,3,null,4,10,6,9,2]
3
Your stdout
defaultdict(<class 'list'>, {1: [3, 5], 3: [1, 6, 10], 6: [3], 10: [3], 5: [1, 4], 4: [5, 2, 9], 2: [4], 9: [4]})
deque([3])
deque([1, 6, 10])
deque([5])
deque([4])
deque([2, 9])
