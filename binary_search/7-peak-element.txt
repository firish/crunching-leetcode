A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, 
and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.
You must write an algorithm that runs in O(log n) time.
 
Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where th

Constraints:
1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.

// third constraint makes the problem considerably easier
// My first solution
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        
        n = len(nums)
        # A single element is always a peak element
        if n == 1:
            return 0
        
        # check for a peak in first or last element of nums
        if nums[0] > nums[1]:
            return 0
        elif nums[-1] > nums[-2]:
            return n-1
        
        # Classic binary search from second element to second last element of nums
        # Clue: Third constraint nums[i] != nums[i+1] makes the question easier to solve
        left, right = 1, n-2
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] > nums[mid - 1] and nums[mid] > nums[mid + 1]:
                return mid
            elif nums[mid] > nums[mid - 1] and nums[mid] < nums[mid + 1]:
                left = mid + 1
            else:
                right = mid - 1
        
result ->
Submission Detail
63 / 63 test cases passed.
Status: Accepted
Runtime: 52 ms (73%)
Memory Usage: 14 MB (93%)