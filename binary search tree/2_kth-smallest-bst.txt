230. Kth Smallest Element in a BST
Medium

Given the root of a binary search tree, and an integer k, 
return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

 

Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:
The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104
 

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?

// My solution
// follow-up not handled
import heapq as heap
class Solution:
    def getvals(self, root, val):
        if not root: return
        val.append(root.val)
        self.getvals(root.left, val)
        self.getvals(root.right, val)
        
        
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        val = []
        self.getvals(root, val)
        heap.heapify(val)
        return heap.nsmallest(k, val)[-1]

result ->
Submission Detail
93 / 93 test cases passed.
Status: Accepted
Runtime: 54 ms (84%)
Memory Usage: 18 MB (91%)


// Brilliant solution, inspired
class Solution:
    def kthSmallest(self, root, k):
        def inorder(r):
            return inorder(r.left) + [r.val] + inorder(r.right) if r else []
    
        return inorder(root)[k - 1]