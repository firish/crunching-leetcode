Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 
Example 1:
Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 
Constraints:
0 <= key, value <= 106
At most 104 calls will be made to put, get, and remove.


// My first solution
// accepted, but problem is that I use a nested array
// searching is O(n) while for dict it should be O(1) avg time
class MyHashMap:

    def __init__(self):
        self.hashmap = [] 

    def put(self, key: int, value: int) -> None:
        for i in range(len(self.hashmap)):
            if self.hashmap[i][0] == key: 
                self.hashmap[i][1] = value
                return
        self.hashmap.append([key, value])
            
    def get(self, key: int) -> int:
        for i in range(len(self.hashmap)):
            if self.hashmap[i][0] == key: return self.hashmap[i][1]
        return -1
    
    def remove(self, key: int) -> None:
        i = 0
        while i < len(self.hashmap):
            if self.hashmap[i][0] == key: 
                self.hashmap.pop(i)
            i += 1

# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)

result ->Runtime: 7730 ms, faster than 5.02% of Python3 online submissions for Design HashMap.
Memory Usage: 17.1 MB, less than 96.99% of Python3 online submissions for Design HashMap.


// Better approch, inspired
