Given an array of intervals where intervals[i] = [starti, endi], 
merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 
Constraints:
1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        # sort the intervals, this makes comaparing elements easy
        intervals.sort()
        
        i = 0
        while i < len(intervals)-1:
            # simply check if upper bound of current interval is higher than lower bound of next interval
            # if it is, merge the elements, else move forward
            if intervals[i][1] >= intervals[i+1][0]:
                low = min(intervals[i][0],intervals[i+1][0])  # get lower bound 
                high = max(intervals[i][1],intervals[i+1][1]) # get upper bound
                # remove first interval and update next interval with merged values
                intervals.pop(i) 
                intervals[i] = [low, high]
                # decrease i, as you want to consider merged element in next comparison
                i -= 1 
            i += 1
        return intervals

result ->
Submission Detail
169 / 169 test cases passed.
Status: Accepted
Runtime: 172 ms (68%)
Memory Usage: 18 MB (99%)