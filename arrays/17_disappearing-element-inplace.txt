Given an array nums of n integers where nums[i] is in the range [1, n], 
return an array of all the integers in the range [1, n] that do not appear in nums.

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]
 

Follow up: 
Could you do it without extra space and in O(n) runtime? 
You may assume the returned list does not count as extra space.

// My first solution
class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        n = len(nums)
        nums = sorted(list(set(nums)))
        missing = [] #officially allowed extra space
        i = 0
        for i in range(1,n+1):
            if i not in nums:
                missing.append(i)
        return missing

result - 
29 / 33 test cases passed.
Status: Time Limit Exceeded
Submitted: 0 minutes ago

// probably "not in" in the for loop is causing the issue.

// My second solution
class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        # nums = [2,2]
        n = len(nums)
        nums = sorted(list(set(nums)))
        # print(nums)
        missing = [] #officially allowed extra space
        for i in range(len(nums)-1):
            if i == 0:
                if nums[i] != 1:
                    gap = nums[i] - 1
                    j = 0
                    while j < gap:
                        missing.append(1 + j)
                        j += 1
            gap = nums[i+1] - nums[i]
            if gap!= 1:
                j = 1
                while j < gap:
                    missing.append(nums[i] + j)
                    j += 1
        gap = n - nums[-1]
        j = 1
        while gap > 0:
            missing.append(nums[-1]+j)
            j += 1
            gap -= 1
        if nums[0] == n:
            while n > 1:
                missing.append(n-1)
                n -= 1
        return missing
        
result - Submission Detail
33 / 33 test cases passed.
Status: Accepted
Runtime: 441 ms (49%)
Memory Usage: 24 MB (40%)

// But solution is too messy, try for a more clean solution
// My solution 3
// cleaner algorithm, using two pointers

class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        N = len(nums)
        nums = sorted(list(set(nums)))
        n = len(nums)
        missing = [] #officially allowed extra space
        j = 0 #second pointer, for nums
        for i in range(1,N+1):
            if i != nums[j]:
                missing.append(i)
            else:
                if j < n-1:
                    j += 1
        return missing

Submission Detail
33 / 33 test cases passed.
Status: Accepted
Runtime: 358 ms (77%)
Memory Usage: 24.4 MB (35%)

// Most of online solutions, use a set
// But unlike me, they store the set and use extra memory
// so it is not O(n) space
// My solution doesn't use any auxillary data structure, everything is in place

// without using the set keyword, you can use following code,

nums = sorted(nums)
i = 0
while i < len(nums)-1:
	if nums[i] == nums[i+1]:
		nums.pop(i)
	else:
		i += 1
// this will make it a sorted set, without using keyword set.
// from there I can use same code,
// time will be O(2n)=O(n)
