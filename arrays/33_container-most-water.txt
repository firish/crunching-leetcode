You are given an integer array height of length n. 
There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

 

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:
Input: height = [1,1]
Output: 1
 
Constraints:
n == height.length
2 <= n <= 105
0 <= height[i] <= 104

// Hint ->
Start with the maximum width container and go to a shorter width container if there is a vertical line longer than the current containers shorter line. 
This way we are compromising on the width but we are looking forward to a longer length container.

// My first solution
class Solution:
    def maxArea(self, height: List[int]) -> int:
        i, j = 0, len(height)-1
        maxi = float('-inf')
        while i<j: 
            maxi = max(maxi, (j-i)*min(height[i], height[j]))
            if height[i] <= height[j]: i += 1
            else: j-= 1
        return maxi

result ->
Submission Detail
60 / 60 test cases passed.
Status: Accepted
Runtime: 832 ms (80%)
Memory Usage: 27.6 MB (18%)