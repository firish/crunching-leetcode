Given an integer array nums, 
find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104


// My first solution, bad, O(n2)
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # nums = [31,-41,59,26,-53,58,97,-93,-23,84]
        # if len(nums) == 1: return nums[0]
        maxi = float('-inf')
        for i in range(len(nums)):
            s = 0
            for j in range(i, len(nums)):
                s += nums[j]
                if s <= 0:break 
                maxi = max(maxi, s)
        return maxi

// second sol, single pass
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxi = float('-inf')
        curr = 0
        for i in range(len(nums)):
            curr += nums[i]
            maxi = max(maxi, curr)
            if curr <= 0: curr = 0 # time to start a new suarray
        return maxi

// Third, kadanes algo, inspired
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # Initialize our variables using the first element.
        current_subarray = max_subarray = nums[0]
        
        # Start with the 2nd element since we already used the first one.
        for num in nums[1:]:
            # If current_subarray is negative, throw it away. Otherwise, keep adding to it.
            current_subarray = max(num, current_subarray + num)
            max_subarray = max(max_subarray, current_subarray)
        
        return max_subarray
