You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. 
On each turn, we choose the heaviest two stones and smash them together. 
Suppose the heaviest two stones have weights x and y with x <= y. 

The result of this smash is:
If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return 0.
 
Example 1:
Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.

Example 2:
Input: stones = [1]
Output: 1 

Constraints:
1 <= stones.length <= 30
1 <= stones[i] <= 1000


// My code
// without using sorting
class Solution:
    def find_heavy(self, stones):
        h1, h2, i1, i2 = 0, 0, 0, 0
        for i in range(len(stones)):
            if stones[i]>h1: 
                h2 = h1
                i2 = i1
                h1 = stones[i]
                i1 = i
            else:
                if stones[i] > h2: 
                    h2 = stones[i]
                    i2 = i
        return i1, i2
        
    def lastStoneWeight(self, stones: List[int]) -> int:
        while len(stones) > 1:
            heavy = self.find_heavy(stones)
            i1, i2 = heavy[0], heavy[1]
            new = stones[i1] - stones[i2]
            stones.pop(max(i2,i1))
            stones.pop(min(i2,i1))
            if new != 0: stones.append(new) 
        return stones[0] if len(stones)!=0 else 0

// time complexity is o(n2)
// if you use sort, it becomes o(n2logn)

Submission Detail
70 / 70 test cases passed.
Status: Accepted
Runtime: 34 ms (82%)
Memory Usage: 14 MB (17%)