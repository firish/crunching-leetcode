Given an integer array nums and an integer k, return the k most frequent elements. 
You may return the answer in any order.

Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]
 
Constraints:
1 <= nums.length <= 105
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.


// My first answer
// uses sort, so O(nlogn)
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        hashmap = defaultdict(int)
        for val in nums:
            hashmap[val] += 1
        count = sorted(list(hashmap.items()), key=lambda x: x[1], reverse=True)
        res = []
        for i in range(k):
            res.append(count[i][0])
        return res
result ->
Success
Details 
Runtime: 137 ms, faster than 54.93% of Python3 online submissions for Top K Frequent Elements.
Memory Usage: 18.8 MB, less than 40.43% of Python3 online submissions for Top K Frequent Elements.

// Handling Follow up
// Second Solution
