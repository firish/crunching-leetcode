You are given a large integer represented as an integer array digits, 
where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order. 
The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.
 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].

// My first solution

class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        # digits = [9,9,9,9]
        for i in range(len(digits)-1,-1,-1):
            carry = 0
            k = digits[i]+1
            if k != 10:
                digits[i] = k
                return digits
            else:
                digits[i] = 0
                carry = 1
        if carry:
            digits.insert(0,1)
        return digits

result - Submission Detail
111 / 111 test cases passed.
Status: Accepted
Runtime: 32 ms (83.5%)
Memory Usage: 14 MB (82%)

// another good oldschool solution, but doesnt work in-place 
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        num = 0
        for digit in digits:
            
            num = num * 10 + digit
            
        num += 1
        output = []
        
        num = str(num)
        for digit in num:
            output.append(int(digit))
        return output