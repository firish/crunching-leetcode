Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, 
return the shortest distance between these two words in the list.

Example 1:
Input: wordsDict = ["practice", "makes", "perfect", "coding", "makes"], word1 = "coding", word2 = "practice"
Output: 3

Example 2:
Input: wordsDict = ["practice", "makes", "perfect", "coding", "makes"], word1 = "makes", word2 = "coding"
Output: 1
 
Constraints:
1 <= wordsDict.length <= 3 * 104
1 <= wordsDict[i].length <= 10
wordsDict[i] consists of lowercase English letters.
word1 and word2 are in wordsDict.
word1 != word2


class Solution:
    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:
        i, j, curr, dist, words, flag = 0, 0, '', 10**5, [word1, word2], False
        while i < len(wordsDict):
            if wordsDict[i] in words:
                if curr != wordsDict[i]:
                    if not flag:
                        flag = True
                        j = i
                        curr = wordsDict[i]
                    else:
                        dist = min(dist, i - j)
                        curr = wordsDict[i]
                        j = i
                else:
                    j = i
            i += 1
        return dist 

Runtime: 97 ms, faster than 41.14% of Python3 online submissions for Shortest Word Distance.
Memory Usage: 17.7 MB, less than 48.55% of Python3 online submissions for Shortest Word Distance.