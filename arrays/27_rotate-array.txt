Rotate Array

Solution
Given an array, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
 

Follow up:

Try to come up with as many solutions as you can. 
There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?

// My first solution
// simplest, using built in functions

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        while k != 0:
            key = nums[-1]
            nums.pop()
            nums.insert(0,key)
            k -= 1

result ->
Submission Detail
38 / 38 test cases passed.
Status: Accepted
Runtime: 2457 ms (15%)
Memory Usage: 25.4 MB (88%)


// My second solution
// uses array slicing

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # using extra space 
        if len(nums) == 0 or len(nums) == 1:
            return
        elif len(nums) <= k:
            k = k % len(nums)    
            
        rotate_point = len(nums)-k 
        arr_right = nums[rotate_point:]
        arr_left = nums[:rotate_point]
        for i in range(len(nums)):
            if i < k:
                nums[i] = arr_right[i]
            else:
                nums[i] = arr_left[i - k]

result ->Submission Detail
38 / 38 test cases passed.
Status: Accepted
Runtime: 259 ms (69%)
Memory Usage: 25.4 MB (85%)

// same solution, but cleaner, using extra space
        # using extra space 
        if len(nums) == 0 or len(nums) == 1:
            return
        elif len(nums) <= k:
            k = k % len(nums)    
            
        rotate_point = len(nums)-k
        res = nums[rotate_point:]
        res.extend(nums[:rotate_point])
        nums[:] = res

// My third solution
// allocate 1 extra bit to hold element to rotate, and shift all elements right once
// just like in microprocessor rotate command

        while k != 0:
            rotate_bit = nums[-1]  #O(1) allowed extra space
            for i in range(len(nums)-1,0,-1):
                nums[i] = nums[i-1]
            nums[0] = rotate_bit
            k -= 1


