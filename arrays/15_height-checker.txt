A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.

You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).

Return the number of indices where heights[i] != expected[i].

 

Example 1:

Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation: 
heights:  [1,1,4,2,1,3]
expected: [1,1,1,2,3,4]
Indices 2, 4, and 5 do not match.
Example 2:

Input: heights = [5,1,2,3,4]
Output: 5
Explanation:
heights:  [5,1,2,3,4]
expected: [1,2,3,4,5]
All indices do not match.
Example 3:

Input: heights = [1,2,3,4,5]
Output: 0
Explanation:
heights:  [1,2,3,4,5]
expected: [1,2,3,4,5]
All indices match.


// pretty easy if you dont write sorting code yourself
// My solution
class Solution:
    def heightChecker(self, heights: List[int]) -> int:
        expected = sorted(heights)
        c = 0
        for i in range(len(expected)):
            if expected[i] != heights[i]:
                c += 1
        return c

result - 
81 / 81 test cases passed.
Status: Accepted
Runtime: 36 ms (82%)
Memory Usage: 13.9 MB (96%)

// Inspired by internet
// same code, with one smart difference, beats 99% people in space complexity
class Solution:
    def heightChecker(self, heights: List[int]) -> int:
        expect = heights.copy() // expect is a copy of heights, not directly sorted
        expect.sort()
        count = 0
        for i in range(len(heights)):
            if heights[i] != expect[i]:
                count += 1        
        return count