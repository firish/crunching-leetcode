The product sum of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (0-indexed).

For example, if a = [1,2,3,4] and b = [5,2,3,1], the product sum would be 1*5 + 2*2 + 3*3 + 4*1 = 22.
Given two arrays nums1 and nums2 of length n, return the minimum product sum if you are allowed to rearrange the order of the elements in nums1. 

Example 1:
Input: nums1 = [5,3,4,2], nums2 = [4,2,2,5]
Output: 40
Explanation: We can rearrange nums1 to become [3,5,4,2]. The product sum of [3,5,4,2] and [4,2,2,5] is 3*4 + 5*2 + 4*2 + 2*5 = 40.

Example 2:
Input: nums1 = [2,1,4,5,7], nums2 = [3,2,4,8,6]
Output: 65
Explanation: We can rearrange nums1 to become [5,7,4,1,2]. The product sum of [5,7,4,1,2] and [3,2,4,8,6] is 5*3 + 7*2 + 4*4 + 1*8 + 2*6 = 65.

Constraints:
n == nums1.length == nums2.length
1 <= n <= 105
1 <= nums1[i], nums2[i] <= 100


// First sol, v easy
class Solution:
    
    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:
        nums1.sort()
        nums2.sort(reverse=True)
        s = 0
        for i in range(len(nums1)):
            s += nums1[i]*nums2[i]
        return s

result- >
Runtime: 1130 ms, faster than 94.80% of Python3 online submissions for Minimize Product Sum of Two Arrays.
Memory Usage: 18.4 MB, less than 98.33% of Python3 online submissions for Minimize Product Sum of Two Arrays.

class Solution:
    
    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:
        
        # Step 1: Build counter 1 and counter 2
        count1, count2 = [0]*101, [0]*101 # as elements can range from 0 to 100
        for el in nums1: count1[el] += 1
        for el in nums2: count2[el] += 1
            
        # Step 2: sort nums1 in increasing and nums2 in non-increasing order
        p1, p2 = 0, 100
        index1, index2 = 0, 0
        while p1 <= 100 and p2 >=0:
            if count1[p1] != 0:
                while count1[p1]>0:
                    nums1[index1] = p1
                    index1 += 1
                    count1[p1] -= 1
            p1 += 1
            if count2[p2] != 0:
                while count2[p2]>0:
                    nums2[index2] = p2
                    index2 += 1
                    count2[p2] -= 1
            p2 -= 1
            
        total = 0
        # Step 3: multiply and get the answer
        for i in range(len(nums1)):
            total += nums1[i]*nums2[i]
        return total

class Solution:
    
    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:
        
        # Step 1: Build counter 1 and counter 2
        count1, count2 = [0]*101, [0]*101 # as elements can range from 0 to 100
        for el in nums1: count1[el] += 1
        for el in nums2: count2[el] += 1
            
        # Step 2: sort nums1 in increasing and nums2 in non-increasing order
        p1, p2 = 0, 100
        index1, index2 = 0, 0
        while p1 <= 100 and p2 >=0:
            if count1[p1] != 0:
                while count1[p1]>0:
                    nums1[index1] = p1
                    index1 += 1
                    count1[p1] -= 1
            p1 += 1
            if count2[p2] != 0:
                while count2[p2]>0:
                    nums2[index2] = p2
                    index2 += 1
                    count2[p2] -= 1
            p2 -= 1
            
        total = 0
        # Step 3: multiply a1*b1....an*bn and get the answer
        for i in range(len(nums1)):
            total += nums1[i]*nums2[i]
        return total