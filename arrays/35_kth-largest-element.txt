Design a class to find the kth largest element in a stream. 
Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:
KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
 

Example 1:
Input
["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]

Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8
 
Constraints:
1 <= k <= 104
0 <= nums.length <= 104
-104 <= nums[i] <= 104
-104 <= val <= 104
At most 104 calls will be made to add.
It is guaranteed that there will be at least k elements in the array when you search for the kth element.


// My first solution
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.sorted = sorted(nums)   

    def add(self, val: int) -> int:
        if len(self.sorted) == 0: 
            self.sorted.append(val)
            
        self.index = len(self.sorted)-self.k
        if self.index >= 0:
            self.kbig = self.sorted[self.index]
            if val <= self.kbig:
                return self.kbig
            
        i = max(0, self.index)
        while self.sorted[i] < val and i < len(self.sorted)-1:
            i += 1
        if i == len(self.sorted): 
            self.sorted.append(val)
        elif self.sorted[0] > val: 
            self.sorted.insert(0, val)
        else:
            if self.sorted[i] > val: self.sorted.insert(i, val)
            else: self.sorted.insert(i+1, val)
            
            
        self.index = len(self.sorted)-self.k
        self.kbig = self.sorted[self.index]
        # print(self.sorted)
        return self.kbig

result ->
Submission Detail
10 / 10 test cases passed.
Status: Accepted
Runtime: 5891 ms (6%)
Memory Usage: 18.3 MB (56%)

class KthLargest:
    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.heap = nums
        heapq.heapify(self.heap)
        
        while len(self.heap) > k:
            heapq.heappop(self.heap)

    def add(self, val: int) -> int:
        heapq.heappush(self.heap, val)
        if len(self.heap) > self.k:
            heapq.heappop(self.heap)
        # print(self.heap)
        return self.heap[0]