Given two binary strings a and b, return their sum as a binary string.

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"

// My first solution
// problem is more tricky than it looks 
// Very popular in facebook interviews

class Solution:
    def addBinary(self, a: str, b: str) -> str:
        
        # convert strings to two arrays
        # let bigger string be maxi and smaller one be mini
        if len(a) >= len(b):
            maxi = [int(x) for x in a]
            mini = [int(x) for x in b]
            M = len(a)
            N = len(b)
        else:
            maxi = [int(x) for x in b]
            mini = [int(x) for x in a]
            M = len(b)
            N = len(a)
            
        # zero pad the smaller array to make both of same size
        # this avoids complication at a later staege
        for i in range(M-N):
            mini.insert(0,0)
        
        # initialize result 
        result = [0]*M
        res = ""
        
        # traverse arrays in reverse
        # as addition if from left to right
        # use a carry flag to keep track of carry 
        c = 0
        for i in range(M-1,-1,-1):
            if maxi[i] + mini[i] + c == 1:
                result[i] = 1
                c = 0
            elif maxi[i] + mini[i] + c == 2:
                result[i] = 0
                c = 1
            elif maxi[i] + mini[i] + c == 3:
                result[i] = 1
                c = 1
        if c:
            result.insert(0,1)
            
        # convert array to string before returning
        for bit in result:
            res += str(bit)
        return res

Submission Detail
294 / 294 test cases passed.
Status: Accepted
Runtime: 40 ms (65%)
Memory Usage: 14 MB (79%)


// since this is very frequently asked problem
// look at this optimized solution (inspired)

class Solution:
    def addBinary(self, a: str, b: str) -> str:
        aL, bL = -len(a), -len(b)
        i, carry, res = -1, 0, ""

        while i >= aL or i >= bL:
            aBit = int(a[i]) if i >= aL else 0
            bBit = int(b[i]) if i >= bL else 0
            
            sum = aBit + bBit + carry
            res = str(sum % 2) + res
            carry = sum // 2

            i -= 1
            
        return "1" + res if carry else res