Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) 
such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

 
Example 1:

Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.
Example 2:

Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.

// My first solution
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        
        # for maximizing sum of min(ai,bi), club smallest elements together
        # easiest way is to sort the list
        nums = sorted(nums)
        
        # initialize the answer
        s = 0
        
        i = 0 
        while i <len(nums)-1:
            # club elements and get minimum
            s += min(nums[i],nums[i+1])
            i += 2
        return s
            
result -> Submission Detail
83 / 83 test cases passed.
Status: Accepted
Runtime: 321 ms (58%)
Memory Usage: 16.9 MB (31%)

// A more cleaner solution,
// since array is sorted beforehand, you dont need to check for minimum
// arra on odd index will be minimum 

class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        
        nums.sort()
        sum = 0
        for i in range(0,len(nums),2):
            sum += nums[i]
        return sum 