Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. 
The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. 
The returned string should only have a single space separating the words. 
Do not include any extra spaces.

 
Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:
Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Example 3:
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:
1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
 

Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?

// My first solution
// very easy and clean
// take advantage of built in function .strip()
// takes care of all leading and trailing spaces
// bad part is that the solution uses extra space in form of an array and a second string

class Solution:
    def reverseWords(self, s: str) -> str:
        arr = s.split()
        res = ""
        for i in range(len(arr)-1, -1, -1): #reverse
            res += arr[i] + " "
        return res[:-1] #ignore the last space

result ->
Submission Detail
58 / 58 test cases passed.
Status: Accepted
Runtime: 32 ms (90%)
Memory Usage: 14.2 MB (47%)


// My second solution
// without using split function
// without extra space for array
class Solution:
    def reverseWords(self, s: str) -> str:
        
        # deal with spaces manually
        # for leading spaces
        while s[0] == " ":
            s = s.replace(s[0],"",1)
        # for trailing spaces
        while s[-1] == " ":
            s = s[:-1]
        # for spaces between words
        i = 0
        while i < len(s):
            if s[i] == " " and s[i-1] == " ":
                s = s[:i] + s[i+1:]
                i -= 1
            i += 1
        
        # for reversing string
        res = ""
        i = len(s) - 1
        end = i
        while i >= 0:
            if i == 0:
                j = 0
                while j <= end:
                    res += s[j]
                    j += 1
                i -= 1
            elif s[i] != " ":
                i -= 1
            else:
                j = i+1
                while j <= end:
                    res += s[j]
                    j += 1
                res += " "
                end = i-1
                i -= 1
        return res
        
result ->
Submission Detail
58 / 58 test cases passed.
Status: Accepted
Runtime: 126 ms (<5%)
Memory Usage: 14.1 MB (77%)
