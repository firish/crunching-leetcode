125. Valid Palindrome
Easy

A phrase is a palindrome if, 
after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, 
it reads the same forward and backward. 
Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.


Example 1:
Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Example 2:
Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Example 3:
Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.

Constraints:
1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.


// My solution
class Solution:
    def isPalindrome(self, s: str) -> bool:
        # ASCII Range of uppercase alphabets -> 65-90
        # ASCII Range of lowercase alphabets -> 97-122
        # ASCII Range of digits -> 48 to 57
        
        s1 = []
        for char in s:
            asci = ord(char)
            if (48 <= asci <= 57) or (97 <= asci <= 122): s1.append(char)
            elif (65 <= asci <= 90): s1.append(chr(asci+32))
        s2 = ''.join(s1)
        return s2[::-1] == s2

Runtime: 59 ms, faster than 75.76% of Python3 online submissions for Valid Palindrome.
Memory Usage: 14.8 MB, less than 32.37% of Python3 online submissions for Valid Palindrome.


// more efficient, using 2 pointers
class Solution:
    def isPalindrome(self, s: str) -> bool:

        i, j = 0, len(s) - 1

        while i < j:
            while i < j and not s[i].isalnum():
                i += 1
            while i < j and not s[j].isalnum():
                j -= 1

            if s[i].lower() != s[j].lower():
                return False

            i += 1
            j -= 1

        return True