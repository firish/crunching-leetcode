48. Rotate Image
Medium

You are given an n x n 2D matrix representing an image, 
rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, 
which means you have to modify the input 2D matrix directly. 
DO NOT allocate another 2D matrix and do the rotation.

 

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

Constraints:
n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

// My solution
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        N = len(matrix)
        # Step 1, swap elements in a row
        for row in matrix:
            i, j = 0, N-1
            while i < j: 
                row[i], row[j] = row[j], row[i]
                i += 1; j -= 1

        # Step2, simulation
        # Go layer by layer and replace el[0,0] with el[N-1,N-1]
        # Then el[0,1] by el[N-1, N-2] till you reach corner element of outermost layer, 
        # then move to the inner layer
        # stop when you reach the lowest corner element
        i1, i2 = 0, N-1
        loop = 0
        while i1 <= i2:
            j1, j2 = 0, N-1-loop
            while i1 < i2:
                matrix[i1][j1], matrix[i2][j2] = matrix[i2][j2], matrix[i1][j1]
                j1 += 1
                i2 -= 1
            i1 += 1
            i2 = N-1
            loop += 1
        return matrix

Runtime: 55 ms, faster than 48.99% of Python3 online submissions for Rotate Image.
Memory Usage: 13.9 MB, less than 74.54% of Python3 online submissions for Rotate Image.


class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        N = len(matrix)
        i, j = 0, N-1
        while i < j:
            matrix[i], matrix[j] = matrix[j], matrix[i]
            i += 1; j -= 1
        
        for i in range(N):
            for j in range(i+1):
                matrix[i][j], matrix[j][i] =  matrix[j][i], matrix[i][j]
        return matrix

Runtime: 50 ms, faster than 61.25% of Python3 online submissions for Rotate Image.
Memory Usage: 13.9 MB, less than 74.54% of Python3 online submissions for Rotate Image.