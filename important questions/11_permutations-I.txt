46. Permutations
Medium

Given an array nums of distinct integers, return all the possible permutations. 
You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]] 

Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


// My code
// Uses backtracking

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        permutations = []
        
        def perm(left, curr):
            if len(left) == 0:
                permutations.append(curr[:])
                return # backtrack
            else:
                for i in range(len(left)):
                    curr.append(left[i])
                    nxt = left[:i] + left[i+1:]
                    perm(nxt, curr) # call
                    curr.pop()
        
        perm(nums, [])
        return permutations

result ->
Submission Detail
26 / 26 test cases passed.
Status: Accepted
Runtime: 41 ms
Memory Usage: 14.1 MB

