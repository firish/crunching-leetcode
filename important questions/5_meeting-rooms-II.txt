Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], 
return the minimum number of conference rooms required.

 
Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1
 
Constraints:
1 <= intervals.length <= 104
0 <= starti < endi <= 106


// My solution
class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        # sort intervals with respect to start time of the meeting
        intervals.sort(key= lambda x: x[0])
        
        # Min-heap to keep track of rooms currently in use
        # let ending time of meeting be the key of min-heap
        rooms = []
        heapq.heappush(rooms, intervals[0][1])
        for i in range(1, len(intervals)):
            # check if any conference room is getting free
            if intervals[i][0] >= rooms[0]:
                heapq.heappop(rooms)
            # add current room
            heapq.heappush(rooms, intervals[i][1])          
        return len(rooms)

Runtime: 86 ms, faster than 81.79% of Python3 online submissions for Meeting Rooms II.
Memory Usage: 17.4 MB, less than 82.13% of Python3 online submissions for Meeting Rooms II.