226. Invert Binary Tree
Easy

Given the root of a binary tree, invert the tree, and return its root.

Example 1:
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:
Input: root = [2,1,3]
Output: [2,3,1]

Example 3:
Input: root = []
Output: []
 
Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100


// My soln

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        
        # Recursive Function for inversion in 3 steps
        # 1: Go left
        # 2: Swap
        # 3: Go left
        
        def invert(troot=root):
            if troot: 
                # Go left
                invert(troot.left)
                
                # Swap
                if troot.left and troot.right:
                    troot.left, troot.right = troot.right, troot.left
                elif not troot.left and troot.right:
                    troot.left = troot.right
                    troot.right = None
                elif not troot.right and troot.left:
                    troot.right = troot.left
                    troot.left = None
                
                # Go left
                invert(troot.left) 

        invert()
        return root

Runtime: 34 ms, faster than 89.98% of Python3 online submissions for Invert Binary Tree.
Memory Usage: 13.9 MB, less than 57.90% of Python3 online submissions for Invert Binary Tree.


// cleaner and proper solution
class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        
        if root:
            # General case:
            # invert child node of current root
            root.left, root.right = root.right, root.left
            
            # invert subtree with DFS
            if root.left:
                self.invertTree( root.left )
            if root.right:
                self.invertTree( root.right )

            return root        
        else:
            # Base case:
            # empty tree
            return None