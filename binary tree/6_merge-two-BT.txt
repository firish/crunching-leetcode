617. Merge Two Binary Trees
Easy

You are given two binary trees root1 and root2.

Imagine that when you put one of them to cover the other, 
some nodes of the two trees are overlapped while the others are not. 
You need to merge the two trees into a new binary tree. 
The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. 
Otherwise, the NOT null node will be used as the node of the new tree.
Return the merged tree.

Note: The merging process must start from the root nodes of both trees.

Example 1:
Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
Output: [3,4,5,5,4,null,7]

Example 2:
Input: root1 = [1], root2 = [1,2]
Output: [2,2]
 
Constraints:
The number of nodes in both trees is in the range [0, 2000].
-104 <= Node.val <= 104

soln 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        
        if not root1: return root2 
        if not root2: return root1
        if not root1 and not root2: return root1
        
        p1, p2 = root1, root2
        
        def merge(p1, p2):
            # if you reach leaf nodes
            if not p1 and not p2: return None
            elif not p1: return p2
            elif not p2: return p1
            
            # if overlap
            p1.val += p2.val     
            p1.left = merge(p1.left, p2.left)
            p1.right = merge(p1.right, p2.right)
            return p1
            
        
        merge(p1, p2)
        return p1
                
Runtime: 121 ms, faster than 66.87% of Python3 online submissions for Merge Two Binary Trees.
Memory Usage: 15.4 MB, less than 98.55% of Python3 online submissions for Merge Two Binary Trees.



// Inspied
def mergeTrees(self, t1, t2):

        if t1 and t2:
            root = TreeNode(t1.val + t2.val)
            root.left = self.mergeTrees(t1.left, t2.left)
            root.right = self.mergeTrees(t1.right, t2.right)
            return root
        else:
            return t1 or t2