Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1
Accepted
1,773,754
Submissions
5,576,009



// My solution

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def check(self, troot, low, high):
        if not troot: return True
        
        if troot.val >= high: return False
        if troot.val <= low: return False
        
        check1 = self.check(troot.left, low, troot.val)
        check2 = self.check(troot.right, troot.val, high)

        # both the checks need to be valid
        return check1 and check2 
        
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        return self.check(root, -math.inf, math.inf)






#approach 2

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    
    def check(self, troot, nodes):
        if not troot: return
        
        self.check(troot.left, nodes) 
        nodes.append(troot.val)
        self.check(troot.right, nodes)
        return nodes
        
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        nodes = self.check(root, [])
        print(nodes)
        if len(nodes) < 2: 
            return True
        
        for i in range(1, len(nodes)):
            if nodes[i] <= nodes[i-1]: return False
        return True