543. Diameter of Binary Tree
Easy

Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. 
This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.


Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:
Input: root = [1,2]
Output: 1
 
Constraints:
The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100

// sol

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        
        di = 0
        
        def longest(troot):
            nonlocal di
            
            if not troot: return 0
            left = longest(troot.left)
            right = longest(troot.right)
            
            # update diameter
            di = max(di, left+right)
            
            # return len of longest branch from the node, (add 1 for edge connecting the node)
            return max(left, right) + 1
        
        longest(root)
        return di
            

Runtime: 52 ms, faster than 85.35% of Python3 online submissions for Diameter of Binary Tree.
Memory Usage: 16.2 MB, less than 84.90% of Python3 online submissions for Diameter of Binary Tree.